#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
deploy-unattended-upgrades.py

:copyright: (c) 2014 by Alexander Skiba <skiba@icg.tugraz.at>
:licence: MIT
:bugreports: skiba@icg.tugraz.at

Deploy the debian/ubuntu unattended-upgrades package and walk
you through the setup.

"""

import os
import subprocess
import argparse
import library.feedback as feedback

# paths
RULE50 = "/etc/apt/apt.conf.d/50unattended-upgrades"
LISTCHANGES = "/etc/apt/listchanges.conf"

# general strings
PREFIX = "DEPLOY-UNATTENDED-UPGRADES: "

# strings to be matched
BUGFIXES = "//\t\"${distro_id}:${distro_codename}-updates\";"
DEBIAN_STABLE = "//      \"o=Debian,a=stable\";"
DEBIAN_STABLE_UPDATES = "//      \"o=Debian,a=stable-updates\";"
MAIL = "//Unattended-Upgrade::Mail \"root\";"
MAIL2 = "//Unattended-Upgrade::Mail \"root@localhost\";"
FRONTEND = "frontend=pager"

BUGFIXES_ENABLED = "\t\"${distro_id}:${distro_codename}-updates\";"
DEBIAN_STABLE_ENABLED = "      \"o=Debian,a=stable\";"
DEBIAN_STABLE_UPDATES_ENABLED = "      \"o=Debian,a=stable-updates\";"
MAIL_ENABLED = "Unattended-Upgrade::Mail \"root\";"

FRONTEND_MAIL = "frontend=mail"

# help texts
H_LISTCHANGES = "install and enable apt-listchanges"


def main():
    """Deploy unattended-upgrades."""

    feedback.register(os.path.basename(__file__).upper())

    options = parse_arguments()

    install_package("unattended-upgrades")
    call_dpkg_reconfigure()
    configure_apt_rule_50()

    if options.enable_listchanges:
        install_package("apt-listchanges")
        configure_apt_listchanges()

    feedback.give("Done.")

def install_package(package):
    """Install the required packages."""

    feedback.give("Installing {}.".format(package))
    subprocess.check_call(["apt-get", "install", package])

def call_dpkg_reconfigure():
    """Explicitly call dpkg-reconfigure to enable updating."""

    feedback.give("Calling reconfigure.")
    subprocess.check_call(["dpkg-reconfigure", "-plow", "unattended-upgrades"])

def configure_apt_rule_50():
    """Enable updating bugfix packages and mail reporting in apt rule."""

    rule = None
    with open(RULE50, "r") as rule_file:
        rule = rule_file.read()

    content_has_changed = False

    feedback.give("Checking whether bugfix updates are enabled.")
    if BUGFIXES in rule:
        feedback.give("Enabling bugfix updates.")
        rule = rule.replace(BUGFIXES, BUGFIXES_ENABLED)
        content_has_changed = True

    if DEBIAN_STABLE in rule:
        feedback.give("Enabling Debian Stable.")
        rule = rule.replace(DEBIAN_STABLE, DEBIAN_STABLE_ENABLED)
        content_has_changed = True

    if DEBIAN_STABLE_UPDATES in rule:
        feedback.give("Enabling Debian Stable Updates.")
        rule = rule.replace(DEBIAN_STABLE_UPDATES,
            DEBIAN_STABLE_UPDATES_ENABLED)
        content_has_changed = True


    feedback.give("Checking whether sending mail is enabled.")
    if MAIL in rule:
        feedback.give("Enabling mail reporting.")
        rule = rule.replace(MAIL, MAIL_ENABLED)
        content_has_changed = True
    elif MAIL2 in rule:
        feedback.give("Enabling mail reporting.")
        rule = rule.replace(MAIL2, MAIL_ENABLED)
        content_has_changed = True

    if content_has_changed == True:
        feedback.give("Configuration has changed and will be written to disk.")
        with open(RULE50, "w") as rule_file:
            rule_file.write(rule)
    else:
        feedback.give("Configuration unchanged.")

def configure_apt_listchanges():
    """Disable showing everything on stdout, send via mail instead."""

    feedback.give("Checking apt-listchanges configuration.")
    content = None
    with open(LISTCHANGES, "r") as configuration:
        content = configuration.read()

    if FRONTEND in content:
        feedback.give("Updating apt-listchanges frontend to use mail.")
        content = content.replace(FRONTEND, FRONTEND_MAIL)
        with open(LISTCHANGES, "w") as configuration:
            configuration.write(content)

def parse_arguments():
    """Parse arguments, provide help text."""
    parser = argparse.ArgumentParser()

    parser.add_argument("--enable-listchanges", help=H_LISTCHANGES,
        action="store_true")

    arguments = parser.parse_args()

    return arguments

if __name__ == '__main__':
    main()
